    
    function process(uint256 gas)
        public
        returns (
            uint256,
            uint256,
            uint256
        )
    {
        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;

        if (numberOfTokenHolders == 0) {
            return (0, 0, lastProcessedIndex);
        }

        uint256 _lastProcessedIndex = lastProcessedIndex;

        uint256 gasUsed = 0;

        uint256 gasLeft = gasleft();

        uint256 iterations = 0;
        uint256 claims = 0;

        while (gasUsed < gas && iterations < numberOfTokenHolders) {
            _lastProcessedIndex++;

            if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {
                _lastProcessedIndex = 0;
            }

            address account = tokenHoldersMap.keys[_lastProcessedIndex];

            if (canAutoClaim(lastClaimTimes[account])) {
                if (processAccount(payable(account), true)) {
                    claims++;
                }
            }
            iterations++;
            uint256 newGasLeft = gasleft();
            if (gasLeft > newGasLeft) {
                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));
            }
            gasLeft = newGasLeft;
        }

        lastProcessedIndex = _lastProcessedIndex;
        return (iterations, claims, lastProcessedIndex);
    }

    function processAccount(address payable account, bool automatic)
        internal
        returns (bool)
    {
        if (!tokenHoldersMap.inserted[account]) {
            return false;
        }

        uint256 amount = _withdrawDividendOfUser(account);

        if (amount > 0) {
            lastClaimTimes[account] = block.timestamp;
            emit Claim(account, amount, automatic);
            return true;
        }

        return false;
    }

    function excludeFromDividends(address account) public onlyOwner {
        require(!excludedFromDividends[account]);
        excludedFromDividends[account] = true;

        uint256 currentBalance = balanceOf(account);
        if (currentBalance < minimumTokenBalanceForDividends) {
            //if existing balance was less than min, the entry is not there
            currentBalance = 0;
        }
        _setBalance(account, 0, currentBalance);
        tokenHoldersMap.remove(account);

        emit ExcludeFromDividends(account);
    }

    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {
        if (lastClaimTime > block.timestamp) {
            return false;
        }

        return block.timestamp.sub(lastClaimTime) >= claimWait;
    }

    function dividendOf(address _owner) public view returns (uint256) {
        return withdrawableDividendOf(_owner);
    }

    function withdrawableDividendOf(address _owner) public view returns (uint256) {
        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);
    }

    function withdrawnDividendOf(address _owner) public view returns (uint256) {
        return withdrawnDividends[_owner];
    }

    function accumulativeDividendOf(address _owner) public view returns (uint256) {
        return
            magnifiedDividendPerShare
                .mul(balanceOf(_owner))
                .toInt256Safe()
                .add(magnifiedDividendCorrections[_owner])
                .toUint256Safe() / magnitude;
    }

    function _withdrawDividendOfUser(address payable user)
        internal
        returns (uint256)
    {
        uint256 _withdrawableDividend = withdrawableDividendOf(user);
        if (_withdrawableDividend > 0) {
            //check if contract has balance to pay out rewards
            uint256 curBalance;
            if (rewardToken == pcsV2Router.WETH()) {
                curBalance = address(this).balance;
                if (curBalance < _withdrawableDividend) {
                    return 0;
                }
            } else {
                curBalance = IERC20(rewardToken).balanceOf(address(this));
                if (curBalance < _withdrawableDividend) {
                    return 0;
                }
            }

            withdrawnDividends[user] = withdrawnDividends[user].add(
                _withdrawableDividend
            );
            emit DividendWithdrawn(user, _withdrawableDividend);

            if (rewardToken == pcsV2Router.WETH()) {
                payable(user).transfer(_withdrawableDividend);
            } else {
                bool success = IERC20(rewardToken).transfer(
                    user,
                    _withdrawableDividend
                );

                if (!success) {
                    withdrawnDividends[user] = withdrawnDividends[user].sub(
                        _withdrawableDividend
                    );
                    return 0;
                }
            }

            return _withdrawableDividend;
        }
        return 0;
    }

    function withdrawDividend() public virtual {
        _withdrawDividendOfUser(payable(msg.sender));
    }

    function setMinimumTokenBalanceForDividends(
        uint256 _minimumTokenBalanceForDividends
    ) external onlyOwner {
        require(
            _minimumTokenBalanceForDividends >= 1 &&
                _minimumTokenBalanceForDividends <= totalSupply().div(100),
            "err"
        );
        minimumTokenBalanceForDividends = _minimumTokenBalanceForDividends;
    }

    function excludeFromReward(address account) public onlyOwner {
        require(!_isExcluded[account], "Account is already excluded from reward");
        if (_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    }

    function includeInReward(address account) external onlyOwner {
        require(_isExcluded[account], "Already excluded");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == account) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _tOwned[account] = 0;
                _isExcluded[account] = false;
                _excluded.pop();
                break;
            }
        }
    }

    function isExcludedFromReward(address account) public view returns (bool) {
        return _isExcluded[account];
    }

    function getNumberOfDividendTokenHolders() external view returns (uint256) {
        return tokenHoldersMap.keys.length;
    }

    function processDividendTracker(uint256 gas) external {
        (uint256 iterations, uint256 claims, uint256 _lastProcessedIndex) = process(
            gas
        );
        emit ProcessedDividendTracker(
            iterations,
            claims,
            _lastProcessedIndex,
            false,
            gas,
            tx.origin
        );
    }

    function claim() external {
        processAccount(payable(msg.sender), false);
    }

        /* Dividend management functions*/
    function distributeDividends(uint256 amount) internal {
        require(_tDividendTotal > 0);

        if (amount > 0) {
            magnifiedDividendPerShare = magnifiedDividendPerShare.add(
                (amount).mul(magnitude) / _tDividendTotal
            );
            emit DividendsDistributed(amount);

            totalDividendsDistributed = totalDividendsDistributed.add(amount);
        }
    }

    function _dtransfer(
        address from,
        address to,
        uint256 value
    ) internal virtual {
        require(false);

        int256 _magCorrection = magnifiedDividendPerShare
            .mul(value)
            .toInt256Safe();
        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]
            .add(_magCorrection);
        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(
            _magCorrection
        );
    }

    function _dmint(address account, uint256 value) internal {
        _tDividendTotal = _tDividendTotal + value;
        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[
            account
        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());
    }

    function _dburn(address account, uint256 value) internal {
        _tDividendTotal = _tDividendTotal - value;
        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[
            account
        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());
    }

    function _setBalance(
        address account,
        uint256 newBalance,
        uint256 currentBalance
    ) internal {
        if (newBalance > currentBalance) {
            uint256 mintAmount = newBalance.sub(currentBalance);
            _dmint(account, mintAmount);
        } else if (newBalance < currentBalance) {
            uint256 burnAmount = currentBalance.sub(newBalance);
            _dburn(account, burnAmount);
        }
    }
 
    function setBalance(
        address payable account,
        uint256 newBalance,
        uint256 currentBalance
    ) private {
        if (excludedFromDividends[account]) {
            return;
        }
        if (currentBalance < minimumTokenBalanceForDividends) {
            //if existing balance was less than min, the entry is not there
            currentBalance = 0;
        }
        if (newBalance >= minimumTokenBalanceForDividends) {
            _setBalance(account, newBalance, currentBalance);
            tokenHoldersMap.set(account, newBalance);
        } else {
            _setBalance(account, 0, currentBalance);
            tokenHoldersMap.remove(account);
        }
        
        processAccount(account, true);
    }
